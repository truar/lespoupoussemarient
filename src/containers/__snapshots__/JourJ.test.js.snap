// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <JourJ />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <PageTitle
          title="Le Jour J"
        />,
        <Carousel
          activeIndex={0}
          interval={false}
          keyboard={true}
          next={[Function]}
          pause="hover"
          previous={[Function]}
          slide={true}
        >
          <CarouselIndicators
            activeIndex={0}
            items={Array []}
            onClickHandler={[Function]}
          />
          <CarouselControl
            direction="prev"
            directionText="Previous"
            onClickHandler={[Function]}
          />
          <CarouselControl
            direction="next"
            directionText="Next"
            onClickHandler={[Function]}
          />
        </Carousel>,
        <div
          className="upAndDown"
        >
          Cliquez ici
        </div>,
      ],
      "className": "JourJ",
      "id": "JourJ",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "title": "Le Jour J",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "activeIndex": 0,
          "children": Array [
            <CarouselIndicators
              activeIndex={0}
              items={Array []}
              onClickHandler={[Function]}
            />,
            Array [],
            <CarouselControl
              direction="prev"
              directionText="Previous"
              onClickHandler={[Function]}
            />,
            <CarouselControl
              direction="next"
              directionText="Next"
              onClickHandler={[Function]}
            />,
          ],
          "interval": false,
          "keyboard": true,
          "next": [Function],
          "pause": "hover",
          "previous": [Function],
          "slide": true,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "activeIndex": 0,
              "items": Array [],
              "onClickHandler": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "direction": "prev",
              "directionText": "Previous",
              "onClickHandler": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "direction": "next",
              "directionText": "Next",
              "onClickHandler": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Cliquez ici",
          "className": "upAndDown",
        },
        "ref": null,
        "rendered": "Cliquez ici",
        "type": "div",
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <PageTitle
            title="Le Jour J"
          />,
          <Carousel
            activeIndex={0}
            interval={false}
            keyboard={true}
            next={[Function]}
            pause="hover"
            previous={[Function]}
            slide={true}
          >
            <CarouselIndicators
              activeIndex={0}
              items={Array []}
              onClickHandler={[Function]}
            />
            <CarouselControl
              direction="prev"
              directionText="Previous"
              onClickHandler={[Function]}
            />
            <CarouselControl
              direction="next"
              directionText="Next"
              onClickHandler={[Function]}
            />
          </Carousel>,
          <div
            className="upAndDown"
          >
            Cliquez ici
          </div>,
        ],
        "className": "JourJ",
        "id": "JourJ",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "title": "Le Jour J",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "activeIndex": 0,
            "children": Array [
              <CarouselIndicators
                activeIndex={0}
                items={Array []}
                onClickHandler={[Function]}
              />,
              Array [],
              <CarouselControl
                direction="prev"
                directionText="Previous"
                onClickHandler={[Function]}
              />,
              <CarouselControl
                direction="next"
                directionText="Next"
                onClickHandler={[Function]}
              />,
            ],
            "interval": false,
            "keyboard": true,
            "next": [Function],
            "pause": "hover",
            "previous": [Function],
            "slide": true,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "activeIndex": 0,
                "items": Array [],
                "onClickHandler": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "direction": "prev",
                "directionText": "Previous",
                "onClickHandler": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "direction": "next",
                "directionText": "Next",
                "onClickHandler": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Cliquez ici",
            "className": "upAndDown",
          },
          "ref": null,
          "rendered": "Cliquez ici",
          "type": "div",
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
